#  FILE preproc#   Copyright Philippe BOULANGER 1987#   All rights reserved.#  NAME#   preproc -- does Pascal conditionnal compilation pre-processing#  SYNOPSIS#   preproc -d flag file [file]*#  DESCRIPTION#   "preproc" generates to output the text in "file" according to the#   value of the "flag" of conditionnal compilation	# set of error messages	set synopsis "### preproc -d flag file [file]*"	set badnumber "### preproc: bad number of parameters"	set badoption "### preproc: bad option (-d)"		# test number of parameters	if {#} < 3		echo  "{badnumber}" >>Dev:StdErr		echo "{synopsis}" >>Dev:StdErr		exit 1	end		# test option	set ft "{1}"	shift	if "{ft}" <> "-d"		echo  "{badoption}" >>Dev:StdErr		echo "{synopsis}" >>Dev:StdErr		exit 1	end	# get flag	set flagname "{1}"	shift		# process files	for i in {parameters}		duplicate -y -d "{i}" preproc.src		open preproc.src		target preproc.src				set exit 0				find 1		replace § "(* PreProc output of {i} at `date` *)∂n∂n"		find 1		replace -c ∞ /•[ ∂t]*'{$SETC'[ ∂t]+([-_0-9A-Za-z]+)®1[ ∂t]+'='[ ∂t]+([-_0-9A-Za-z]*)®2[ ∂t]*'}'/ '#define ®1 ®2'		find 1		replace -c ∞ /•[ ∂t]*'{$IFC NOT'[ ∂t]+([-_0-9A-Za-z]+)®1[ ∂t]*'}'/ '#ifndef ®1'		find 1		replace -c ∞ /•[ ∂t]*'{$IFC'[ ∂t]+([-_0-9A-Za-z]+)®1[ ∂t]+(?+)®2[ ∂t]*'}'/ '#if ®1 ®2'		find 1		replace -c ∞ /•[ ∂t]*'{$IFC'[ ∂t]+([-_0-9A-Za-z]+)®1[ ∂t]*'}'/ '#ifdef ®1'		find 1		replace -c ∞ /•[ ∂t]*'{$ELSEC'[ ∂t]*'}'/ '#else'		find 1		replace -c ∞ /•[ ∂t]*'{$ENDC'[ ∂t]*'}'/ '#endif'		set exit 1		close -y preproc.src		c -e -d "{flagname}" preproc.src >"{i}".preproc				# kill preproc.src		delete preproc.src			end