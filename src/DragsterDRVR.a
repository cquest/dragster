;----------------------------------------------------------------
;
;  Driver qui donne la main a la RunTime de
;  Dragster pour la version BackGround
;
;
;       3/86    PhB     premiere Run Time de Dragster
;
;-----------------------------------------------------------------

                BLANKS          ON
                STRING          ASIS

                INCLUDE  'QuickEqu.a'
                INCLUDE  'SysEqu.a'
                INCLUDE  'ToolEqu.a'
                INCLUDE  'Traps.a'

DrgStart        PROC	         EXPORT  

DOOpen	        EQU	         0
DOClose	        EQU	         1
DOEvent	        EQU	         2
DORun	        EQU	         3
DOCursor        EQU	         4
DOMenu	        EQU	         5

Sched	        EQU	         0
TCBPtr	        EQU	         -16
GVarsPtr        EQU	         24

                EXPORT  DOEntry
DOEntry
                DC.W	         $6C00     ;locked, dNeedTime, ctl & status enable
                DC.W	         1         ;very often	(every tick)
                DC.W	         0         ;no event
                DC.W	         0         ;no menu

; Entry point offset table

                DC.W    OrnOpen-DOEntry         ; open routine
                DC.W    OrnDone-DOEntry         ; prime
                DC.W    OrnCtl-DOEntry          ; control
                DC.W    OrnStatus-DOEntry       ; status
                DC.W    OrnClose-DOEntry        ; close

; title (optional)

                DC.B    8
                DC.B    'Dragster         '    ; See that byte? The assembler sux


;{=========================================================================}
;	local datas
;{=========================================================================}
;	MyJump : pointeur sur la Jump Table
;{=========================================================================}
MyJump	        DC.L    0

;{=========================================================================}
;	MyFlag : Dragster Working Flag, prevent reentrance
;{=========================================================================}
MyFlag	        DC.W    0

;=================================================================
;	Vertical Retrace Interrupt Control Bloc
;=================================================================
MyVBLBloc
                DC.L	         0       ; qLink	   - not set
                DC.W	     vType       ; qType	   - 1
                DC.L	         0       ; vblAddr  - TimeCall Adr
                DC.W	      5*60       ; vblCount - first time wait 5 secs
                DC.W	         0       ; vblPhase - no phase

;=================================================================
; Time Manager Task Control Bloc
;=================================================================
MyTimeBloc
                DC.L	         0       ; qLink
                DC.W	     	 0       ; qType
                DC.L	         0       ; tmAddr  - TimeCall Adr
                DC.L	      	 0       ; tmCount - (first time wait 5 secs)
                DC.L	         0       ; tmWakeUp
                DC.L	         0       ; tmReserved

;=================================================================
; Task Priority Table
;=================================================================
HasVM			DC.L			 0		; mém. virtuelle présente ?
ModeType		DC.W			 0
TPTable			DCB.B	         2048,0  ;
				; array[0..255] of record
				;					PredPTY	:	Integer;
				;					NextPTY	:	Integer;
				;					LastTCB	:	TPr;
				;				   end;
										

;{=========================================================================}
;{ OrnOpen : Initialise le driver					   }
;{=========================================================================}
OrnOpen
                MOVE.L  MyJump,D0	        ; Is there already storage?
                BEQ.S   OrnDone		        ; no, install interrupt

                MOVEQ   #-23,D0		        ; Already open
                BRA.S   OrnErr

OrnDone
                MOVEQ   #0,D0		        ;no error
OrnErr
                RTS			        ;all done with open

;{=========================================================================}
;{ OrnClose : arrete le driver											   }
;{=========================================================================}
OrnClose
				LEA		MyVBLBloc,A0	; adresse du record de la VBL
				_VRemove				; on supprime la VBL
				LEA		MyTimeBloc,A0	; adresse du record de la TimeTask
				_RmvTime				; on la supprime
				LEA		MyFlag,A0		; address of Dragster Working Flag
			    MOVE.W	#1,(A0)			; set Flag active (on bloque Dragster)
                MOVE.L	MyJump,A0
				CLR.L	(A0)			; Kill Dragster...
				BRA		OrnDone	        ;all done with close

;{=========================================================================}
;{ OrnCtl : Donne la main au serveur									   }
;{=========================================================================}
OrnCtl
                MOVE.L  MyJump,D0	        ; Is there already storage?
                BEQ.S   CtlDone		        ; Out if not

; give cpu to Dragster Scheduler

                MOVEM.L D0-D7/A0-A6,-(sp)       ; save data & a0 to a6

				LEA		ModeType,A0				
				CLR.W	(A0)					; on n'est pas sous IT

				JSR		CallDrg
				
                MOVEM.L (sp)+,D0-D7/A0-A6       ; restore data & a0 to a6

; all done with the control request, so exit appropriately

CtlDone
                btst    #1,ioTrap(a0)	        ; Was this an immediate call?
                bne.s   OrnDone		        ; If so, do an immediate exit
                MOVE.L  JIODone,-(SP)	        ; Otherwise, use IoDone
                MOVEQ   #0,D0		        ; no error
                RTS			        ; bye-bye


;{=========================================================================}
;{ OrnStatus :	Set et Get de dCtlStorage - pointeur sur la Jump Table	   }
;{	       		Set de l'interrupt VRM									   }
;{=========================================================================}
; 				csCode = 255 pour le SetStatus
;				csCode = 254 pour le GetStatus
;				csCode = 253 pour le GetVars
;				csCode = 252 pour le Get de TPTable
;				csCode = 251 pour GetFirstTCB

OrnStatus
                MOVEM.L	 A2/A3,-(SP)	        ; Save Regs

                MOVE.W  csCode(a0),D0	        ; Is it Get Status Call ?
                CMP.W   #255,D0
                BEQ.S   SetStatus
                CMP.W   #254,D0
                BEQ.S   GetStatus
                CMP.W   #253,D0
                BEQ.S   GetVars
                CMP.W   #252,D0
                BEQ.S   GetTPTable
				CMP.W	#251,D0
				BEQ.S	GetFirstTCB
				CMP.W	#250,D0
				BEQ.S	GetVarOffset
				BRA.S   StatusDone

GetVarOffset	; rend des infos sur la variable
				BRA		StatusDone
				
GetFirstTCB		
				MOVE.L	csParam(a0),A2
				MOVE.L	MyJump,A3
				MOVE.L	TCBPtr(A3),(A2)
				BRA.S	StatusDone
				
GetTPTable
                MOVE.L  csParam(a0),a2	        ; CsParam Ptr
                LEA  	TPTable,a3	        	; Task Priority Table
				MOVE.L  a3,(a2)       			; Set Ptr
                BRA.S   StatusDone

GetVars
                MOVE.L  csParam(a0),a2	        ; CsParam Ptr
                MOVE.L  MyJump,a3	        	; Run Time Jump Table
                MOVE.L  TCBPtr(a3),a3	        ; First TCB ptr
                MOVE.L  GVarsPtr(a3),(a2)       ; Shared vars Ptr
                BRA.S   StatusDone

GetStatus
                MOVE.L  csParam(a0),a2	        ; CsParam Ptr
                MOVE.L  MyJump,(a2)	        	; get status record
                BRA.S   StatusDone

SetStatus
                LEA     MyJump,A2
                MOVE.L  csParam(A0),(A2)        ;set status record

                ; installation de la routine d'interruption VBL

                MOVEM.L A0/A1,-(SP)

                LEA     MyVBLBloc,A0	        ; my VBL bloc
                LEA     VBLCall,A1	        	; Service Routine
                MOVE.L  A1,vblAddr(A0)	        ; Set it
                _VInstall

                LEA     MyTimeBloc,A0	        ; my Time bloc
                LEA     TimeCall,A1
                MOVE.L  A1,vblAddr(A0)
                _InsTime

				LEA		MyTimeBloc,A0			; on attends 5s avant de démarrer
				MOVE.L	#5000,D0
				_PrimeTime
				
                MOVEM.L (SP)+,A0/A1

StatusDone
                MOVEM.L	 (SP)+,A2/A3	        ; restore regs
                BRA.S   CtlDone		        ; bye bye

;=================================================================
;Procedure VBLCall;
;=================================================================

TimeIt	        EQU	         12*6		; addr dans la JumpTable de TimeIt

VBLCall
				
                MOVE.L  MyJump,D0	        	; jump table
				BEQ.S	RetIt					; Dragster n'est plus là !!
				
                LEA     MyVBLBloc,A0	        ; my VBL bloc
                MOVE.W  #1,vblCount(A0)	        ; next tick
				
                MOVE.L  MyJump,A0	        	; jump table
				JSR     TimeIt(A0)		        ; jump to it

				LEA		MyFlag,A0				; address of Dragster Working Flag
				TST.W	(A0)					; Dragster active ?
				BNE.S	RetIt					; yes, get out

				LEA		ModeType,A0
				MOVE.W	#1,(A0)					; on est sous IT (VBL) !!!

				JSR		CallDrgIT
RetIt
                RTS                             ; Return to It caller


;=================================================================
;Procedure TimeCall;	
;=================================================================

TimeCall
                MOVE.L  MyJump,D0	        	; jump table
				BEQ.S	RetIt3					; Dragster n'est plus là !!
				
				LEA		MyFlag,A0				; address of Dragster Working Flag
				TST.W	(A0)					; Dragster active ?
				BNE.S	RetIt2					; yes, get out
				
				LEA		ModeType,A0
				MOVE.W	#1,(A0)					; on est sous IT (TimeTask) !!!

				JSR		CallDrgIT
RetIt2
				LEA		MyTimeBloc,A0
				MOVE.L	#10,D0					; tout les 1/100s
				_PrimeTime
RetIt3
                RTS                             ; Return to It caller


CallDrgIT		; appel de Dragster sous IT
				MOVE.L	HasVM,D1				; Mém. virtuelle ?
				BEQ.S	CallDrg					; non… on appelle directement
				LEA		MyFlag,A0				; address of Dragster Working Flag
			    MOVE.W	#1,(A0)					; set Flag active
				LEA		CallDrg2,A0				; routine à appeler…
				_DeferUserFn					; ATTENTION à la mémoire virtuelle !

CallDrg			; appel de Dragster
				LEA		MyFlag,A0				; address of Dragster Working Flag
			    MOVE.W	#1,(A0)					; set Flag active
CallDrg2		PEA		TPTable					; Task Priority Table Pointer -> Pile
                MOVE.L  MyJump,a2	        	; Dragster Jump Table
				JSR     Sched(a2)		        ; invoke Dragster Scheduler
				LEA		MyFlag,A0				; address of Dragster Working Flag
				CLR.W	(A0)					; set Flag inactive
				RTS
				
				END
