;File DragsterRT2asm.a
;----------------------------------------------------------------
;
;       RunTime 2 de Dragster
;
;
;-----------------------------------------------------------------


                BLANKS          ON
                STRING          ASIS

                INCLUDE  'QuickEqu.a'
                INCLUDE  'SysEqu.a'
                INCLUDE  'ToolEqu.a'
                INCLUDE  'Traps.a'
				INCLUDE  'DragsterTCB.a'

RT	         	PROC	         EXPORT 


;=================================================================
; Construction JumpTable de la runtime pour cette Unit
;=================================================================


;=================================================================
; Macro de construction de la JumpTable
;=================================================================
                MACRO         
                JConst
				IMPORT	&Syslst[1]
                LEA     &Syslst[1],A1
                MOVE.L  A1,&Syslst[2]*6+2(A0)
                ENDM 

;=================================================================
                EXPORT  MyConst
				IMPORT	PJumpTable

MyConst
				LEA		PJumpTable,A0
				MOVE.L	(A0),A0				; A0 pointe sur la table de jump

                JConst SAbs,20		        	;      20 + 0
                JConst NumAnd,21		        ;      20 + 1
                JConst SAsc,23		        	;      20 + 3
                JConst SChr,25		        	;      20 + 5
                JConst Date,30		        	;      20 +10
                JConst DSpcR,32			        ;      20 +12
                JConst DSpcL,33			        ;      20 +13
                JConst Format,42		        ;      20 +22
                JConst sInstr,45		        ;      20 +25
                JConst SLeft,48			        ;      20 +28
                JConst Lwc,52		        	;      20 +32
                JConst Mid,53		        	;      20 +33
                JConst SNot,54		        	;      20 +34
                JConst NumOr,56			        ;      20 +36
                JConst SRight,59		        ;      20 +39
                JConst SSpc,65		        	;      20 +45
                JConst Str,66		        	;      20 +46
                JConst SString,67		        ;      20 +47
                JConst STime,69			        ;      20 +49
                JConst Upc,72		        	;      20 +52
                JConst Mul,80		        	;      20 +60
                JConst SDiv,81		        	;      20 +61
                JConst SMod,82		        	;      20 +62
                JConst NumPlus,83		        ;      20 +63
                JConst StrPlus,84		        ;      20 +64
                JConst Moins,85			        ;      20 +65
                JConst SNeg,86		        	;      20 +66
                JConst StrEq,93			        ;      20 +73
                JConst StrInf,94		        ;      20 +74
                JConst StrSup,95		        ;      20 +75
                JConst StrEqInf,96		        ;      20 +76
                JConst StrEqSup,97		        ;      20 +77
                JConst StrDiff,98		        ;      20 +78
				JConst SSecs,151				;	   20 +131
				JConst SDate2Secs,152			;	   20 +132
				JConst SSecs2Date,153			;	   20 +133
				
                JConst ResetZones,58	        ;      20 +38
                JConst SVal,73		        	;      20 +53
				JConst BaseOpen,161				;	   20 +141
				JConst BaseClose,162			;	   20 +142
				JConst BaseSeek,163				;	   20 +143
				JConst BaseUpdate,164			;	   20 +144
				JConst BaseAdd,165				;	   20 +145
				JConst BaseRemove,166			;	   20 +146
				JConst BaseNext,167				;	   20 +147
				JConst BasePred,168				;	   20 +148
				JConst BaseCreate,169			;	   20 +149
				JConst BaseInfo,170				;	   20 +150
				JConst BASEINCR,171				;	   20 +151
				JConst BASEREAD,172				;	   20 +152
				JConst BASESETREF,173			;	   20 +153
				JConst BASEGETREF,174			;	   20 +154
				JConst BaseMaxSize,178			;	   20 +158

				JConst MyTest,136		        ;      20 +116	SE_Init
;				JConst SE_Moteur,137	        ;      20 +117
;				JConst SE_Resultat,138	        ;      20 +118
;				JConst SE_Donnee,139		    ;      20 +119
;				JConst SE_Question,144			;	   20 +124

                JConst CarWrite,5		        ;       5
                JConst NumWrite,6		        ;       6
                JConst StrWrite,7		        ;       7
                JConst NumRead,10		        ;      10
                JConst StrRead,11		        ;      11
	 			JConst StartRead,13				;	   13
	 			JConst StartWrite,14 	 		;	   14
	 			JConst EndWrite,15		 		;	   15
                JConst SAppend,22		        ;      20 + 2
                JConst SClose,26		        ;      20 + 6
                JConst SCreate,28		        ;      20 + 8
                JConst SEof,37		        	;      20 +17
                JConst sFPos,43			        ;      20 +23
                JConst FAsGetEof,44		        ;      20 +24
                JConst FASDelete,47		        ;      20 +27
                JConst SOpenDrg,55			    ;      20 +35
                JConst FASRename,57		        ;      20 +37
                JConst RLen,60		        	;      20 +40
                JConst RSeek,61			        ;      20 +41
                JConst sSeek,62			        ;      20 +42
                JConst FASSetEof,63		        ;      20 +43
                JConst SLock,108		        ;      20 +88
                JConst SUnlock,109		        ;      20 +89
                JConst BRead,132		        ;      20 +112
                JConst BWrite,133		        ;      20 +113
                JConst DirFile,135	        	;      20 +115
				JConst SNewFolder,154			;	   20 +134
				JConst SGetFInfo,155			;	   20 +135
				JConst SSetFInfo,156			;	   20 +136
				JConst SGetVol,157				;	   20 +137
				JConst SOpenRF,177				;	   20 +157

;	Utilitaires routines externes
				
				JConst GetTCB,16
				JConst HandleSelector,17

; routines assembleur directe

                JConst AsmError,38		        ;      20 +18
                JConst AsmTaskNumber,117	    ;      20 +97
                JConst AsmGetPriority,118	    ;      20 +98
                JConst AsmSetPriority,119	    ;      20 +99
                JConst AsmModNumber,128	        ;      20 +108
                JConst AsmStarFlag,129	        ;      20 +109
				JConst AsmTrPrint,175			;	   20 +155
                JConst AsmTickCount,68	        ;      20 +48
                JConst AsmLen,49		       	;      20 +29
                JConst AsmLogtime,51	        ;      20 +31
                JConst AsmTimeOut,70			;      20 +50
                JConst AsmKey,140		        ;      20 +120
                JConst AsmZoneNumber,76	        ;      20 +56
				JConst AsmFilter,160			;	   20 +140

                JConst AsmNumEq,87			    ;      20 +67
                JConst AsmNumDiff,92			;      20 +72
                JConst AsmNumInf,88		        ;      20 +68
                JConst AsmNumSup,89		        ;      20 +69
                JConst AsmNumInfEq,90		    ;      20 +70
                JConst AsmNumSupEq,91		    ;      20 +71
				
				JConst AsmStrCopy,100			;
				
                RTS

			ENDPROC
			
			PROC
GetInt		MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.W	(A4,D0.W),D0
			EXT.L	D0
			MOVE.L	D0,(SP)			; on pose le résultat
			JMP		(A0)
			
GetLong		MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.L	(A4,D0.W),(SP)	; on pose le résultat sur la pile
			JMP		(A0)

GetBool		MOVE.L	(SP)+,A0		; adresse de retour
			CLR.L	D1				; raz de D1
			MOVE.B	(A4,D0.W),D1	; lit le BOOLEAN
			MOVE.L	D1,(SP)			; résultat sur la pile
			JMP		(A0)
			
SetInt		MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.L	(SP)+,D1		; valeur à mettre
			MOVE.W  D1,(A4,D0.W)	; on la range à sa place
			JMP		(A0)
			
SetLong		MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.L	(SP)+,(A4,D0.W)	; on range la valeur à sa place
			JMP		(A0)

SetBool		MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.L	(SP)+,D1		; on lit la valeur du boolean
			MOVE.B	D1,(A4,D0.W)	; on la range à sa place
			JMP		(A0)
			
			EXPORT	AsmError
AsmError	MOVEQ	#cstError,D0
			JMP		GetInt
			
			EXPORT	AsmTaskNumber
AsmTaskNumber
			MOVEQ	#cstTasknumber,D0
			JMP		GetInt
			
			EXPORT	AsmGetPriority
AsmGetPriority
			MOVEQ	#cstTaskPriority,D0
			JMP		GetInt

			EXPORT	AsmSetPriority
AsmSetPriority
			MOVEQ	#cstTaskPriority,D0
			JMP		SetInt

			EXPORT	AsmModNumber
AsmModNumber
			MOVEQ	#cstTheModem,D0
			JMP		GetInt
			
			EXPORT	AsmStarFlag
AsmStarFlag
			MOVEQ	#cstStarFlag,D0
			JMP		GetBool
			
			EXPORT	AsmTrPrint
AsmTrPrint	MOVE.W	#cstTrPrintFlag,D0
			JMP		SetBool
			
			EXPORT	AsmTickCount
AsmTickCount
			CLR.L	-(SP)
			_TickCount
			MOVE.L	(SP)+,4(SP)
			RTS
			
			EXPORT	AsmLen
AsmLen		MOVE.L	(SP)+,A0	; adresse de retour
			MOVE.L	(SP)+,A1	; adresse de la chaine
			CLR.L	D0			; raz D0
			MOVE.B	(A1),D0		; longueur de la chaine
			MOVE.L	D0,(SP)		; on met le résultat sur la pile
			JMP		(A0)

			EXPORT	AsmLogTime
AsmLogTime	MOVE.W	#cstStartTime,D0
			JMP		GetLong

			EXPORT	AsmTimeOut
AsmTimeOut	MOVEQ	#60,D0		; valeur de MaxTime=60*Timeout
			MULS	6(A7),D0
			MOVE.L	D0,4(A7)
			MOVE.W	#cstMaxTime,D0
			JMP		SetLong
			
			EXPORT	AsmKey
AsmKey		MOVEQ	#cstError,D0
			MOVE.L	(SP)+,A0		; adresse de retour
			MOVE.W	(A4,D0.W),D0
			EXT.L	D0
			SUBI.L	#127,D0			; Key = Error - 127
			MOVE.L	D0,(SP)			; on pose le résultat
			JMP		(A0)
			
			EXPORT	AsmZoneNumber
AsmZoneNumber
			MOVEQ	#cstZoneNumber,D0
			JMP		GetInt

			EXPORT	AsmFilter
AsmFilter	MOVE.W	#cstFilterFlag,D0
			JMP		SetBool
			
			EXPORT	AsmNumEq
AsmNumEq	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BNE.S	@FinEq		; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinEq		JMP		(A0)

			EXPORT	AsmNumDiff
AsmNumDiff	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BEQ.S	@FinDiff	; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinDiff	JMP		(A0)

			EXPORT	AsmNumSup
AsmNumSup	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BLE.S	@FinSup		; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinSup		JMP		(A0)

			EXPORT	AsmNumInf
AsmNumInf	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BGE.S	@FinInf		; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinInf		JMP		(A0)

			EXPORT	AsmNumInfEq
AsmNumInfEq	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BGT.S	@FinInfEq	; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinInfEq	JMP		(A0)

			EXPORT	AsmNumSupEq
AsmNumSupEq	MOVE.L	(SP)+,A0	; retour
			CMP.L	(A7)+,(A7)+
			BLT.S	@FinSupEq	; il y a déjà 0 sur la pile !!!!
			MOVEQ	#1,D0
			MOVE.L	D0,(A7)
@FinSupEq	JMP		(A0)

			EXPORT AsmStrCopy
AsmStrCopy	MOVE.L	4(A7),A1		; adresse destination
			MOVE.B	(A0),D0			; D0=longueur de la chaine source
			ADDQ	#1,D0			; on ajoute l'octet de longueur
			LSR.L	#2,D0			; D0=D0/4
@boucle		MOVE.L	(A0)+,(A1)+		; on recopie 4 octets d'un coup
			DBF		D0,@boucle
			MOVE.L	(A7)+,A7
			RTS

			ENDPROC
			
