;File InTask.asm
;----------------------------------------------------------------
;
;       Tache serveur d'entree: InTask  20/05/85
;
;-----------------------------------------------------------------


                BLANKS          ON
                STRING          ASIS

                INCLUDE  'QuickEqu.a'
                INCLUDE  'SysEqu.a'
                INCLUDE  'ToolEqu.a'
                INCLUDE  'Traps.a'

				INCLUDE  'DragsterTCB.a'
				
                IMPORT	      TheTask

DrgJump         PROC	EXPORT	      

;=================================================================
; Pointeur sur le Task Control Bloc du serveur
;=================================================================
CurStPtr        DC.L	         0


;=================================================================
; Demarrage de la tache
;=================================================================
;
                JMP	        TheTask

;
;=================================================================
;Function GetCurSt: StPtr;
;=================================================================
; GetCurSt rend CurStPtr, qui pointe sur le TCB Actif
                EXPORT  GetCurSt
GetCurSt
                move.l  CurStPtr,4(sp)	        ; Return function result
                rts			        ; So long

;
;=================================================================
;Procedure AsmCompletion;
;=================================================================
; AsmCompletion réactive la tâche après I/O

                EXPORT  AsmCompletion
AsmCompletion
                move.l  -4(A0),A0	        	; put TCB Address in A0
				MOVE.W	#0,cstStatusWord(A0)	; StatusWord := ReadyCst;
                MOVE.W	#0,cstIOCompFlag(A0);	; IOCompFlag := 0;
				rts			        			; So long


;=================================================================
;Procedure SwapTasks(AdRegs1,AdRegs2:	 Ptr);
;=================================================================
; Sauvegarde contexte courant dans AdRegs1 et restaure AdRegs2;
; - a5 reste inchange
                EXPORT  SwapTasks
SwapTasks
                move.l  (sp)+,d0	        ; Get Return address
                move.l  (sp)+,a0	        ; Get AdRegs2
                move.l  (sp)+,a1	        ; Get AdRegs1

;                move    sr,16*4(a1)	        ; Save status register
                movem.l d0-d7/a0-a7,(a1)  	; Save data and address regs

;                move    16*4(a0),ccr	    ; Restore status register
                movem.l (a0),d0-d7/a0-a7  	; Restore data and address regs

				move.l	d0,a0
                jmp     (a0)		        ; Return to caller

;
;=================================================================
;Procedure MonCallProc(TheProc: Ptr);
;=================================================================
; Appelle la procedure pascal TheProc
                EXPORT  MonCallProc
MonCallProc
                move.l  (sp)+,a0	        ; Get Return address
                move.l  (sp)+,a1	        ; Get TheProc
                move.l  a0,-(sp)	        ; Push Return Address
                jmp     (a1)		        ; call proc

;
;=================================================================
;Procedure StrSetLen(Var TheStr: Str255; TheLen: Integer);
;=================================================================
; Set la longueur de la chaine
                EXPORT  StrSetLen
StrSetLen
                move.l  (sp)+,a0	        ; Get Return address
                move.w  (sp)+,d0	        ; Get TheLen
                move.l  (sp)+,a1	        ; Get TheStr address

                move.b  d0,(a1)		        ; set len

                jmp     (a0)		        ; Return to caller

;
;=================================================================

               END 
			   