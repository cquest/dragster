;File DragsterRTxasm.a
;----------------------------------------------------------------
;
;       Unit x de la RunTime de Dragster
;		Header des units de Dragster
;
;-----------------------------------------------------------------


                BLANKS          ON
                STRING          ASIS

                INCLUDE  'QuickEqu.a'
                INCLUDE  'SysEqu.a'
                INCLUDE  'ToolEqu.a'
                INCLUDE  'Traps.a'
				
				INCLUDE  'DragsterTCB.a'
				
Main	         MAIN	EXPORT 

;=================================================================
; Pointeur sur GetCurSt
; Pointeur sur SetCurSt
; Pointeur sur GetStPtr
; Pointeur sur JumpTable
;=================================================================
				EXPORT	PJumpTable
PGetCurSt       DC.L	        0
PSetCurSt       DC.L	        0
PGetStPtr       DC.L	        0
PSetStPtr       DC.L	        0
PJumpTable		DC.L			0


;=================================================================
; Init de la Unit
;=================================================================
				IMPORT	UnitInit
				JMP		UnitInit
				
;
;=================================================================
;Function GetCurSt: StPtr;
;=================================================================
; GetCurSt rend CurStPtr, qui pointe sur le TCB Actif
                EXPORT  GetCurSt
GetCurSt
                move.l  PGetCurSt,a0
                jmp		(a0)

;
;=================================================================
;Procedure SetCurSt(ThePtr: StPtr);
;=================================================================
; SetCurSt met a jour CurStPtr, qui pointe sur le TCB Actif
                EXPORT  SetCurSt
SetCurSt
                move.l  PSetCurSt,a0
                jmp		(a0)

;
;=================================================================
;Procedure SetTheSt(ThePtr: StPtr);
;=================================================================
; SetTheSt met a jour TheStPtr, qui pointe sur la premiere TCB
                EXPORT  SetTheSt
SetTheSt
                move.l  PSetStPtr,a0
                jmp		(a0)

;
;=================================================================
;Procedure SetNilSt;
;=================================================================
; SetCurSt resette CurStPtr
                EXPORT  SetNilSt
SetNilSt
				clr.l	-(sp)
                move.l  PSetCurSt,a0
                jmp		(a0)

;
;
;=================================================================
;Function GetStPtr: StPtr;
;=================================================================
; GetStPtr rend TheStPtr, qui pointe sur la premiere TCB
                EXPORT  GetStPtr
GetStPtr
                move.l  PGetStPtr,a0
                jmp		(a0)


;=================================================================
;Procedure SwapTasks(AdRegs1,AdRegs2:	 Ptr);
;=================================================================
; Sauvegarde contexte courant dans AdRegs1 et restaure AdRegs2;
; - a5 reste inchange
                EXPORT  SwapTasks
SwapTasks
                move.l  (sp)+,d0	        ; Get Return address
                move.l  (sp)+,a0	        ; Get AdRegs2
                move.l  (sp)+,a1	        ; Get AdRegs1

;                move    sr,16*4(a1)	        ; Save status register
                movem.l d0-d7/a0-a7,(a1)  	; Save data and address regs

;                move    16*4(a0),ccr	    ; Restore Cond. Code Register •••• Modif pour 7.0 ••••
                movem.l (a0),d0-d7/a0-a7  	; Restore data and address regs

				move.l	d0,a0
                jmp     (a0)		        ; Return to caller

;=================================================================
;Procedure AsmCompletion;
;=================================================================
; AsmCompletion réactive une tâche après IO
				
				EXPORT  AsmCompletion
AsmCompletion
                move.l  -4(A0),A0	        	; put TCB Address in A0
				MOVE.W	#0,cstStatusWord(A0)	; StatusWord := ReadyCst;
                MOVE.W	#0,cstIOCompFlag(A0);	; IOCompFlag := 0;
                rts			        			; So long
				

               ENDMAIN
			   END
			   