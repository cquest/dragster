;File DragsterSpyer.a;----------------------------------------------------------------;;  Dragster Spyer - donne un report régulièrement de l'état;  du BackGround.;;;       9/87    PhB     premiere version de Dragster Spyer;;-----------------------------------------------------------------                BLANKS          ON                STRING          ASIS                INCLUDE  'QuickEqu.a'                INCLUDE  'SysEqu.a'                INCLUDE  'ToolEqu.a'                INCLUDE  'Traps.a'				INCLUDE	 'DragsterTCB.a'				DrgStart        MAIN	  EXPORTSched	        EQU	         0TCBPtr	        EQU	         -12GVarsPtr        EQU	         24SchedRegs		EQU			cstRegAreaF				BRA			MyInstall				BRA			MyRemove				;{=========================================================================}; local datas;{=========================================================================};{=========================================================================};{ MyJump : pointeur sur le 1er TCB					   				   };{=========================================================================}MyJump	        DC.L    0;{=========================================================================};{ MyIdle : Temps d'attente entre deux reports					   		   };{=========================================================================}MyIdle	        DC.L    0;{=========================================================================};{ MyIdle : Temps d'attente entre deux reports					   		   };{=========================================================================}Chk5	    	DC.L    0Chk4	    	DC.L    0Chk3	    	DC.L    0Chk2	    	DC.L    0Chk1	    	DC.L    0;{=========================================================================};{ TheCurSt : pointeur sur CurStPtr					   		   };{=========================================================================}TheCurSt	    DC.L    0;=================================================================; Time Manager Control Bloc;=================================================================MyTMBloc                DC.L	         0       ; qLink	   	- not set                DC.W	     	 0       ; qType	   	- ?                DC.L	         0       ; tmAddr  		- CallTimeIt Adr                DC.L	         0       ; tmCount 		- wait 1 tick;=================================================================; Check Parameter Bloc;=================================================================Check1				DC.L	0	; Regs Ptr;				DC.L	0	; pc				DC.W	0	; sr				DC.L	0	; TCB Ptr;				DC.W	0	; System Error Id				DC.W	0	; vol				DC.W	0	; file				DC.W	0	; module				DC.W	0	; line				DC.W	0	; inst				DC.W	0	; index				DC.W	0	; bound				DC.W	0	; phase				DCB.B	256,0	; str				DCB.B	$80,0	; parameter block				Check2				DC.L	0	; Regs Ptr;				DC.L	0	; pc				DC.W	0	; sr				DC.L	0	; TCB Ptr;				DC.W	0	; System Error Id				DC.W	0	; vol				DC.W	0	; file				DC.W	0	; module				DC.W	0	; line				DC.W	0	; inst				DC.W	0	; index				DC.W	0	; bound				DC.W	0	; phase				DCB.B	256,0	; str				DCB.B	$80,0	; parameter block				Check3			DC.W	0	; N° de la dernière tâche qui a planté				DC.L	0	; quand a-t-elle planté ? (secs)				DC.W	0	; nombre de plantage consécutifs…;{=========================================================================};{ GetCheck1															   };{=========================================================================}				Export GetCheck1GetCheck1				LEA		Check1,A0				MOVE.L	A0,4(SP)				RTS								;{=========================================================================};{ GetCheck2															   };{=========================================================================}				Export GetCheck2GetCheck2				LEA		Check2,A0				MOVE.L	A0,4(SP)				RTS				;{=========================================================================};{ GetCheck3															   };{=========================================================================}				Export GetCheck3GetCheck3				LEA		Check3,A0				MOVE.L	A0,4(SP)				RTS												;{=========================================================================};{ GetMyJump															   };{=========================================================================}				Export GetMyJumpGetMyJump				MOVE.L	MyJump,4(SP)				RTS								;{=========================================================================};{ GetMyIdle															   };{=========================================================================}				Export GetMyIdleGetMyIdle				MOVE.L	MyIdle,4(SP)				RTS								;{=========================================================================};{ MyInstall : Initialise le spyer										   };{=========================================================================}MyInstall                LEA		MyJump,A0				MOVE.L	4(SP),(A0)	        ; 1st Task pointer				LEA		TheCurSt,A0				MOVE.L	8(SP),(A0)			; pointer to CurSt								; TST.L	(A0)				; Idle time a zero ?				; BEQ.S	NoTimeIt			; no time it if so								; install time routine				; LEA		MyTProc,A1			; My Time interrupt routine				; LEA		MyTMBloc,A0				; MOVE.L	A1,6(A0)			; ProcAddr				; _InsTime								; prime time routine				; LEA		MyTMBloc,A0				; MOVE.L	MyIdle,D0				; _PrimeTime				;                          on a vire le systeme par temps												NoTimeIt				; Installation du vecteur d'interrupt				; pour exceptions de 5 a 1				LEA		Chk5,A0				MOVE.L	$18,(A0)								LEA		MyCheck5,A0				MOVE.L	A0,$18								LEA		Chk4,A0				MOVE.L	$14,(A0)								LEA		MyCheck4,A0				MOVE.L	A0,$14								LEA		Chk3,A0				MOVE.L	$10,(A0)								LEA		MyCheck3,A0				MOVE.L	A0,$10								LEA		Chk2,A0				MOVE.L	$0C,(A0)								LEA		MyCheck2,A0				MOVE.L	A0,$0C								LEA		Chk1,A0				MOVE.L	$08,(A0)								LEA		MyCheck1,A0				MOVE.L	A0,$08								; return to caller								MOVE.L	(SP)+,A0			; return adress				ADDQ.L	#8,SP				; remove parameters								JMP		(A0)				; so long;{=========================================================================};{ MyRemove : Retire le spyer										   };{=========================================================================}MyRemove				; Re-installation du vecteur d'interrupt				; pour exceptions de 5 a 1				LEA		Chk5,A0				MOVE.L	(A0),$18								LEA		Chk4,A0				MOVE.L	(A0),$14								LEA		Chk3,A0				MOVE.L	(A0),$10								LEA		Chk2,A0				MOVE.L	(A0),$0C								LEA		Chk1,A0				MOVE.L	(A0),$08								; return to caller				RTS;{=========================================================================};{ MyTProc: interrupt routine					   };{=========================================================================}				IMPORT	MyPCheckMyCheck5				MOVEM.L	D0-D7/A0-A7,-(SP)	; save all registers				MOVE.L	TheCurSt,A0			; A0 points to CurSt pointer				TST.L	(A0)				; is there a pointer to a TCB				BEQ.S	OCheck5				; no, front most application crashed								; process now check error on this Task				LEA		Check1,A0				MOVE.L	SP,(A0)				; push registers address				MOVE.L	2+64(SP),4(A0)		; pc pointer				MOVE.W	64(SP),8(A0)		; status register				; SUB.L	#2,A1				; check bound ptr				MOVE.L	TheCurSt,A1				MOVE.L	(A1),10(A0)			; faulty task pointer				MOVE.W	#5,14(A0)			; system error id				; DC.W	$FACE				; break to see if all is good				JSR		MyPCheck			; goto tracer routine				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	TheCurSt,A1				MOVE.L	(A1),A1				; faulty task pointer				LEA		SchedRegs(A1),A0	; scheduler registers				LEA		ReSched,A1			; A1 scratched				MOVE.L	A1,2(SP)			; return adress				RTE							; restor context				OCheck5				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	Chk5,-(SP)			; jump to Old Check				RTSMyCheck4				MOVEM.L	D0-D7/A0-A7,-(SP)	; save all registers				MOVE.L	TheCurSt,A0			; A0 points to CurSt pointer				TST.L	(A0)				; is there a pointer to a TCB				BEQ.S	OCheck4				; no, front most application crashed								; process now check error on this Task				LEA		Check1,A0				MOVE.L	SP,(A0)				; push registers address				MOVE.L	2+64(SP),4(A0)		; pc pointer				MOVE.W	64(SP),8(A0)		; status register				; SUB.L	#2,A1				; check bound ptr				MOVE.L	TheCurSt,A1				MOVE.L	(A1),10(A0)			; faulty task pointer				MOVE.W	#4,14(A0)			; system error id				; DC.W	$FACE				; break to see if all is good				JSR		MyPCheck			; goto tracer routine				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	TheCurSt,A1				MOVE.L	(A1),A1				; faulty task pointer				LEA		SchedRegs(A1),A0	; scheduler registers				LEA		ReSched,A1			; A1 scratched				MOVE.L	A1,2(SP)			; return adress				RTE							; restor context				OCheck4				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	Chk4,-(SP)			; jump to Old Check				RTSMyCheck3				MOVEM.L	D0-D7/A0-A7,-(SP)	; save all registers				MOVE.L	TheCurSt,A0			; A0 points to CurSt pointer				TST.L	(A0)				; is there a pointer to a TCB				BEQ.S	OCheck3				; no, front most application crashed								; process now check error on this Task				LEA		Check1,A0				MOVE.L	SP,(A0)				; push registers address				MOVE.L	2+64(SP),4(A0)		; pc pointer				MOVE.W	64(SP),8(A0)		; status register				; SUB.L	#2,A1				; check bound ptr				MOVE.L	TheCurSt,A1				MOVE.L	(A1),10(A0)			; faulty task pointer				MOVE.W	#3,14(A0)			; system error id				; DC.W	$FACE				; break to see if all is good				JSR		MyPCheck			; goto tracer routine				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	TheCurSt,A1				MOVE.L	(A1),A1				; faulty task pointer				LEA		SchedRegs(A1),A0	; scheduler registers				LEA		ReSched,A1			; A1 scratched				MOVE.L	A1,2(SP)			; return adress				RTE							; restor context				OCheck3				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	Chk3,-(SP)			; jump to Old Check				RTSMyCheck2				MOVEM.L	D0-D7/A0-A7,-(SP)	; save all registers				MOVE.L	TheCurSt,A0			; A0 points to CurSt pointer				TST.L	(A0)				; is there a pointer to a TCB				BEQ.S	OCheck2				; no, front most application crashed								; process now check error on this Task				LEA		Check1,A0				MOVE.L	SP,(A0)				; push registers address				MOVE.L	2+64(SP),4(A0)		; pc pointer				MOVE.W	64(SP),8(A0)		; status register				; SUB.L	#2,A1				; check bound ptr				MOVE.L	TheCurSt,A1				MOVE.L	(A1),10(A0)			; faulty task pointer				MOVE.W	#2,14(A0)			; system error id				; DC.W	$FACE				; break to see if all is good				JSR		MyPCheck			; goto tracer routine				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	TheCurSt,A1				MOVE.L	(A1),A1				; faulty task pointer				LEA		SchedRegs(A1),A0	; scheduler registers				LEA		ReSched,A1			; A1 scratched				MOVE.L	A1,2(SP)			; return adress				RTE							; restor context				OCheck2				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	Chk2,-(SP)			; jump to Old Check				RTSMyCheck1				MOVEM.L	D0-D7/A0-A7,-(SP)	; save all registers				MOVE.L	TheCurSt,A0			; A0 points to CurSt pointer				TST.L	(A0)				; is there a pointer to a TCB				BEQ.S	OCheck1				; no, front most application crashed								; process now check error on this Task				LEA		Check1,A0				MOVE.L	SP,(A0)				; push registers address				MOVE.L	2+64(SP),4(A0)		; pc pointer				MOVE.W	64(SP),8(A0)		; status register				; SUB.L	#2,A1				; check bound ptr				MOVE.L	TheCurSt,A1				MOVE.L	(A1),10(A0)			; faulty task pointer				MOVE.W	#1,14(A0)			; system error id				; DC.W	$FACE				; break to see if all is good				JSR		MyPCheck			; goto tracer routine				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	TheCurSt,A1				MOVE.L	(A1),A1				; faulty task pointer				LEA		SchedRegs(A1),A0	; scheduler registers				LEA		ReSched,A1			; A1 scratched				MOVE.L	A1,2(SP)			; return adress				RTE							; restor context				OCheck1				MOVEM.L	(SP)+,D0-D7/A0-A7	; restore registers				MOVE.L	Chk1,-(SP)			; jump to Old Check				RTS;{=========================================================================};{ MyTProc: interrupt routine					   };{=========================================================================}				IMPORT	MyPTProcMyTProc				; JSR		MyPTProc								; RTS								; ReInstall for next interrupt				; install time routine				; LEA		MyTMBloc,A0				; _InsTime								; prime time routine				; LEA		MyTMBloc,A0				; MOVE.L	MyIdle,D0				; _PrimeTime				                ; RTS			        		;all done with interrupt routine;;=================================================================;Procedure SwapTasks(AdRegs1,AdRegs2:	 Ptr);;=================================================================; Restore les registres du scheduler dansReSched                ; a0 doit contenir l'adresse des registres du scheduler                movem.l (a0),d0-d7/a0-a7  ; Restore data and address regs				move.l	d0,a0                jmp     (a0)		        ; Return to caller;               ENDMAIN			   END